{"version":3,"sources":["SlotGrid.js","ShipStatus.js","ShipConfiguration.js","App.js","serviceWorker.js","index.js"],"names":["SlotGrid","size","slots","letter","this","props","GAME_DATA","SIZE_LETTERS","size_comps","components","i","length","label","push","react_default","a","createElement","Grid_default","item","container","key","xs","Paper_default","className","classes","slot","id","justify","spacing","renderSlotRow","Component","withStyles","theme","root","flexGrow","padding","unit","textAlign","color","palette","text","primary","height","width","ShipStatus","current","max","statusMaxCell","_this","reduceComponents","field","reduceWrapper","prev","curr","after","console","log","name","_arr","Object","values","_i","reduce","p","c","baseShip","SHIP_TYPES","shipType","list","max_crew","max_officer","max_craft","rows","renderStatusRow","map","idx","statusTable","renderStatusTable","secondary","ShipConfiguration","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initialShipType","state","pickShip","bind","assertThisInitialized","onChange","value","s","event","setState","parseInt","target","S","M","L","pShip","default_components","comp","SHIP_COMPONENTS","shipName","renderShipSelector","src_SlotGrid","src_ShipStatus","marginBottom","require","App","src_ShipConfiguration","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4f03624.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass SlotGrid extends Component {\n    renderSlotRow(size) {\n        let slots = [];\n        let letter = this.props.GAME_DATA.SIZE_LETTERS[size]\n        let size_comps = this.props.components[letter];\n        for (let i = 0; i < size_comps.length; i++) {\n            let label = letter + (i + 1);\n            slots.push(\n                <Grid item container key={label} xs={1}>\n                    <Paper className={this.props.classes.slot}>\n                        {label}: {size_comps[i].id}\n                    </Paper>\n                </Grid>\n            );\n        }\n        return (\n            <Grid container item justify='center' spacing={8} xs={12}>\n                {slots}\n            </Grid>\n        );\n    }\n\n    render() {\n        return (\n            <Grid container spacing={16} justify='center'>\n                {this.renderSlotRow(3)}\n                {this.renderSlotRow(2)}\n                {this.renderSlotRow(1)}\n            </Grid>\n        );\n    }\n}\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    slot: {\n        padding: theme.spacing.unit,\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n        height: 75,\n        width: 75,\n    },\n});\n\nexport default withStyles(styles)(SlotGrid);","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass ShipStatus extends Component {\n  renderStatusRow(i, label, current, max) {\n    return (\n      <tr key={i}>\n        <td>{label}:</td>\n        <td>{current}</td>\n        <td>/</td>\n        <td className={this.props.classes.statusMaxCell}>{max}</td>\n      </tr>\n    )\n  }\n\n  renderStatusTable() {\n    const reduceComponents = (field) => {\n      let current = 0;\n\n      const reduceWrapper = (prev, curr) => {\n        let after = prev + curr[field];\n        console.log('reduceComponents: ', prev, ' + ', curr.name, '.', field, ' = ', after, ' (', after - prev, ')');\n        return after;\n      }\n\n      for (let size of Object.values(this.props.components)) {\n        current = size.reduce((p, c) => reduceWrapper(p, c), current);\n      }\n\n      return current;\n    }\n\n    const baseShip = this.props.GAME_DATA.SHIP_TYPES[this.props.shipType];\n    const list = [\n      [\"Mass\", reduceComponents(\"mass\"), reduceComponents(\"drive_mass\")],\n      [\"Crew\", reduceComponents(\"holds_crew\"), baseShip.max_crew],\n      [\"Officers\", reduceComponents(\"holds_officer\"), baseShip.max_officer],\n      [\"Craft\", reduceComponents(\"holds_craft\"), baseShip.max_craft],\n    ];\n\n    const rows = [];\n\n    for (let i = 0; i < list.length; i++) {\n      rows.push(this.renderStatusRow(i + 1, list[i][0], list[i][1], list[i][2]));\n    }\n\n    return (\n      <table>\n        <tbody>\n          {list.map((item, idx) => this.renderStatusRow(idx + 1, item[0], item[1], item[2]))}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    return (\n      <Grid item>\n        <Paper className={this.props.classes.statusTable}>\n          {this.renderStatusTable()}\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  statusTable: {\n    padding: theme.spacing.unit,\n    color: theme.palette.text.primary,\n  },\n  statusMaxCell: {\n    color: theme.palette.text.secondary,\n  }\n});\n\nexport default withStyles(styles)(ShipStatus);","import React, { Component } from 'react';\nimport SlotGrid from './SlotGrid';\nimport ShipStatus from './ShipStatus';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass ShipConfiguration extends Component {\n    constructor(props) {\n        super(props);\n    \n        const { initialShipType } = props;\n        this.state = { shipType: initialShipType } ;\n        this.pickShip = this.pickShip.bind(this);\n    }\n\n    renderShipSelector() {\n        return (\n            <select onChange={this.pickShip} value={this.state.shipType}>\n                {\n                    this.props.GAME_DATA.SHIP_TYPES.map((s) => {\n                        return s.id ? <option key={'ship' + s.id} value={s.id}>{s.name}</option> : '';\n                    })\n                }\n            </select>\n        );\n    }\n\n    pickShip(event) {\n        this.setState({ shipType: parseInt(event.target.value) });\n        console.log(\"selected ship \" + event.target.value);\n    }\n\n    render() {\n        // Fill component list from ship type's defaults.\n        const components = {'S': [], 'M': [], 'L': []};\n        const pShip = this.props.GAME_DATA.SHIP_TYPES[this.state.shipType];\n\n        for (let i = 0; i < pShip.default_components.length; i++) {\n            let comp = this.props.GAME_DATA.SHIP_COMPONENTS[pShip.default_components[i]];\n            components[this.props.GAME_DATA.SIZE_LETTERS[comp.size]].push(comp);\n        }\n\n        return (\n            <Grid container spacing={0}>\n                <Grid item container justify='center' key='shipName' xs={10}>\n                    <div className={this.props.classes.shipName}>\n                        {this.renderShipSelector()}\n                    </div>\n                </Grid>\n                <Grid item xs={10}>\n                    <SlotGrid shipType={this.state.shipType}\n                        components={components}\n                        GAME_DATA={this.props.GAME_DATA}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <ShipStatus shipType={this.state.shipType}\n                        components={components}\n                        GAME_DATA={this.props.GAME_DATA}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    shipName: {\n        padding: theme.spacing.unit,\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n        height: 16,\n        width: 300,\n        marginBottom: theme.spacing.unit,\n    },\n});\n\nexport default withStyles(styles)(ShipConfiguration);\n","import React, { Component } from 'react';\nimport './App.css';\nimport ShipConfiguration from './ShipConfiguration';\n\nconst GAME_DATA = {\n    SHIP_TYPES: require('./ships.json'),\n    SHIP_COMPONENTS: require('./components.json'),\n    SIZE_LETTERS: [null, 'S', 'M', 'L'],\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <ShipConfiguration initialShipType={this.props.shipType} GAME_DATA={GAME_DATA}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App shipType={4} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}